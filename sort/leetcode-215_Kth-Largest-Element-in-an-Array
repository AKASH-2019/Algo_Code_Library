class Solution {
public:

    void heapify(vector<int> &ht, int i){
        int largest = i, ln = ht.size();
        int l = i*2+1;
        int r = i*2+2;
        if(l<ln && ht[l]>ht[largest]){
            largest = l;
        }
        if(r<ln && ht[r]>ht[largest]){
            largest = r;
        }
        
        if(largest != i){
            swap(ht[i],ht[largest]);
            heapify(ht,largest);
        }
    }

    // buildMaxheap -> O(n/2) -> O(n)
    void buildMaxheap(vector<int> &ht){
        int ln = ht.size();
        int st = ln/2-1;
        for(int i=st; i>=0; i--){
            heapify(ht,i);
        }
    }

    // heapSort -> O(nlogn)
    int heapSort(vector<int> &ht, int k){
        int ln = ht.size();
        int i=ln-1, ans;
    
        while(k--){
            swap(ht[i], ht[0]);
            ans = ht[i];
            i--;
            ht.pop_back();
            heapify(ht,0); // logn
        }
        return ans;
    }
    ////////////////////////////////// Find Kth Largest Element /////////////////////////////////////////////////////// 
    int findKthLargest(vector<int>& nums, int k) {
        buildMaxheap(nums);
        return heapSort(nums, k); 
    }
};
